// This file is part of evmbind.

// Copyright (C) 2022 Ade M Ramdani.
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//
package main

import "github.com/ethereum/go-ethereum/accounts/abi"

// TemplateData is the data structure that is passed to the template.
type TemplateData struct {
	// package name
	Package string
	// ABI is the ABI of the contract.
	ABI string
	// Bin is the compiled bytecode of the contract.
	Bin string
	// Funcs is a list of functions.
	Funcs []Function
}

// Function is a function.
type Function struct {
	// Name is the name of the function.
	Name string
	// Method is the method of the evm.
	Method string
	// Id is the ID of the function.
	Id string
	// Raw is the raw ABI of the function.
	Raw string
	// Inputs is a list of inputs.
	Inputs []Argument
	// Outputs is a list of outputs.
	Outputs []abi.Type
}

// Argument is an argument of the function.
type Argument struct {
	// Name is the name of the argument.
	Name string
	// Type is the type of the argument.
	Type abi.Type
}

var Templ = `// Code generated by evmbind. DO NOT EDIT.
package {{ .Package }}

import (
	"math/big"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/vm/runtime"
)

var (
	_ = big.NewInt
)

var (
	ABI = "{{ .ABI }}"
	Bin = "{{ .Bin }}"
)

// exec executes the given contract and method inside evm.
func exec(inputs []byte) []byte {
	code := common.Hex2Bytes(Bin)
	ret, _, err := runtime.Execute(code, inputs, nil)
	if err != nil {
		panic(err)
	}

	return ret
}

{{range .Funcs}}// {{ .Name }} is a function represented contract method {{ .Id }}.
//
// Solidity: {{ .Raw }}
func {{ .Name }}({{$params := parseIn .Inputs}}{{ $params }}) {{$output := parseOut .Outputs}}{{ $output }} {
	{{$body := parseBody .Method .Inputs .Outputs}}{{ $body }}
}

{{ end }}`

type tmpFnBodyData struct {
	Method       string
	AbiPackParam string
	Return       string
}

var tmpFnBody = `abis, err := abi.JSON(strings.NewReader(ABI))
	if err != nil {
		panic(err)
	}
	inputs, err := abis.Pack("{{ .Method }}"{{ .AbiPackParam }})
	if err != nil {
		panic(err)
	}
	ret := exec(inputs)
	res, err := abis.Unpack("{{ .Method }}", ret)
	if err != nil {
		panic(err)
	}
	return {{ .Return }}`

